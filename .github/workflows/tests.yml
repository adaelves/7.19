name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.8

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb ffmpeg

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install ffmpeg via chocolatey
        choco install ffmpeg

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Lint with flake8
      run: |
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        mypy app --ignore-missing-imports

    - name: Run unit tests
      run: |
        python -m tests.test_runner unit --verbose

    - name: Run integration tests
      run: |
        python -m tests.test_runner integration --verbose

    - name: Run UI tests (Linux with Xvfb)
      if: matrix.os == 'ubuntu-latest'
      run: |
        xvfb-run -a python -m tests.test_runner ui --verbose

    - name: Run UI tests (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      run: |
        python -m tests.test_runner ui --verbose

    - name: Run performance tests
      run: |
        python -m tests.test_runner performance --verbose

    - name: Generate test report
      if: always()
      run: |
        python -m tests.test_runner report

    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${{ matrix.os }}-${{ matrix.python-version }}
        path: test_reports/

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./test_reports/coverage.json
        flags: unittests
        name: codecov-umbrella

  network-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run network tests
      run: |
        python -m tests.test_runner network --verbose

    - name: Upload network test reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: network-test-reports
        path: test_reports/